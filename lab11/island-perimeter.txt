class Solution {
public:
    int islandPerimeter(vector<vector<int>>& grid) {
        int rows = grid.size();
        int cols = grid[0].size();
        vector<vector<bool>> visited(rows, vector<bool>(cols, false));

        vector<pair<int, int>> directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        
        function<int(int, int)> dfs = [&](int r, int c) {
            if (r < 0 || c < 0 || r >= rows || c >= cols || grid[r][c] == 0) {
                return 1; 
            }
            if (visited[r][c]) {
                return 0; 
            }

            visited[r][c] = true; 
            int perimeter = 0;

            for (auto [dr, dc] : directions) {
                perimeter += dfs(r + dr, c + dc);
            }

            return perimeter;
        };

        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < cols; c++) {
                if (grid[r][c] == 1) {
                    return dfs(r, c);
                }
            }
        }

        return 0; 
    }
};
