class Solution {
public:
    int openLock(vector<string>& deadends, string target) {
        unordered_set<string> dead(deadends.begin(), deadends.end());
        unordered_set<string> visited;
        queue<pair<string, int>> q;

        if (dead.count("0000")) return -1;
        q.push({"0000", 0});
        visited.insert("0000");

        while (!q.empty()) {
            auto [current, moves] = q.front();
            q.pop();

            if (current == target) return moves;

            for (int i = 0; i < 4; ++i) {
                string nextUp = current;
                string nextDown = current;

                nextUp[i] = (current[i] - '0' + 1) % 10 + '0';
                if (!visited.count(nextUp) && !dead.count(nextUp)) {
                    q.push({nextUp, moves + 1});
                    visited.insert(nextUp);
                }

                nextDown[i] = (current[i] - '0' + 9) % 10 + '0';
                if (!visited.count(nextDown) && !dead.count(nextDown)) {
                    q.push({nextDown, moves + 1});
                    visited.insert(nextDown);
                }
            }
        }

        return -1;
    }
};
