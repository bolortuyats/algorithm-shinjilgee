#  binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def sortedArrayToBST(self, nums):
        if not nums:
            return None
        
        # middle element
        mid = len(nums) // 2
        
        # Create a tree node with the middle element as the root
        root = TreeNode(nums[mid])
        
        root.left = self.sortedArrayToBST(nums[:mid])
        
        root.right = self.sortedArrayToBST(nums[mid+1:])
        
        return root

from collections import deque

def print_bst_level_order(root):
    if not root:
        return []
    
    result = []
    queue = deque([root])
    
    while queue:
        node = queue.popleft()
        if node:
            result.append(node.val)
            queue.append(node.left)
            queue.append(node.right)
        else:
            result.append(None)
    
    while result and result[-1] is None:
        result.pop()
    
    return result

# Example usage:
if _name_ == "_main_":
    sol = Solution()

    # Example 1
    nums1 = [-10, -3, 0, 5, 9]
    bst1 = sol.sortedArrayToBST(nums1)
    print("BST for nums1:", print_bst_level_order(bst1))  # Output: [0, -3, 9, -10, None, 5]

    # Example 2
    nums2 = [1, 3]
    bst2 = sol.sortedArrayToBST(nums2)
    print("BST for nums2:", print_bst_level_order(bst2))  # Output: [3, 1] or [1, None, 3]










class TreeNode {
    constructor(val = 0, left = null, right = null) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}

function sortedArrayToBST(nums) {
    if (!nums.length) return null;

    function convertToBST(left, right) {
        if (left > right) return null;

        const mid = Math.floor((left + right) / 2);
        const node = new TreeNode(nums[mid]);

        node.left = convertToBST(left, mid - 1);
        node.right = convertToBST(mid + 1, right);

        return node;
    }

    return convertToBST(0, nums.length - 1);
}

// Example usage
const nums1 = [-10, -3, 0, 5, 9];
const nums2 = [1, 3];
console.log(sortedArrayToBST(nums1));  // Output: TreeNode representing the BST
console.log(sortedArrayToBST(nums2));  // Output: TreeNode representing the BST